<script type="text/javascript">
// Bind form-related events and callbacks
$( document ).ready(function() {
  // Initial setup for required fields
  $(".form-control-required").each(function(index) {
    var strValue = $(this).val().replace(/^ +/g, "").replace(/ +$/g, "");
    if (strValue == "")
    {
      $(this).parent().addClass("has-error");
    }
  });
  // Check required fields when losing focus
  $(".form-control-required").on('focusout', function(event) {

    form_control_check_required($(event.target));

  });
  $("#_CANCEL").on('click', function(event) {
    // Mark form as cancelled - thus the form will be submitted without checking field values
    $(event.target).closest(".form-horizontal").addClass("form-cancel");
    $(event.target).closest(".form-inline").addClass("form-cancel");
    $(event.target).closest(".form-view").addClass("form-cancel");
  });

  // When use type on ESC key, cancel form (click on CANCEL button, if any)
  $("#_FORM_NEW").on('keyup', function(event) {
    if (event.which == 27 /* Esc */)
    {
      $("#_CANCEL").click();
    }
  });
  $("#_FORM_VIEW").on('keyup', function(event) {
    if (event.which == 27 /* Esc */)
    {
      $("#_CANCEL").click();
    }
  });
  $("#_FORM_NEW").on('submit', function(event) {
    var blnSubmit = false;
    var objErrors = null;
    if ($(event.target).hasClass("form-cancel"))
    {
      blnSubmit = true;
    }
    else
    {
      // Recheck all mandatory fields - thus pressing the enter key, which submits forms, provoke a new check of all values (even if focus is not lost)
      form_check_required($(event.target));

      // Get list of controls in error
      objErrors = $(".has-error");
      blnSubmit = (objErrors.length == 0);
    }
    if(blnSubmit)
    {
      // No error: do form submit, but do not send autocomplete fields
      $(".form-dont-submit").prop("disabled", true);
    }
    else
    {
      // There are errors: do not submit form (block callback)
      event.preventDefault();
      // Set focus on first field in error
      if (objErrors)
      {
        $(objErrors.first()).find(".form-control").focus();
      }
    }
  });
  $("#_ADD").on('click', function(event) {
    // Redirect to new form
    window.location.href = "new";
  });
  $("#_MODIFY").on('click', function(event) {
    // Change form action
    $("#_FORM_VIEW").attr("action", "update");
    // Enable fieldset under form
    $("#_FORM_VIEW > fieldset").prop("disabled", false);
    // Disable Add/Modify/Delete buttons
    $("#_ADD").prop("disabled", true);
    $("#_MODIFY").prop("disabled", true);
    $("#_DELETE").prop("disabled", true);
    // Show OK/Cancel buttons
    $("#_OK_CANCEL").removeClass("hidden").addClass("show");
    // Set focus on first field
    form_control_autofocus("#_FORM_VIEW");
  });
  $("#_DELETE").on('click', function(event) {
    // Change form action
    $("#_FORM_VIEW").attr("action", "delete");
    // Let fieldset disabled
    // Disable Add/Modify/Delete buttons
    $("#_ADD").prop("disabled", true);
    $("#_MODIFY").prop("disabled", true);
    $("#_DELETE").prop("disabled", true);
    // Show OK/Cancel buttons
    $("#_OK_CANCEL").removeClass("hidden").addClass("show");
  });

  // Make clickable rows in tables - if they have the valid HTML5 attribute "data-href"
  $('tr[data-href]').click(function(){
    window.document.location = $(this).data("href");
  });

  // Set focus automatically
  form_control_autofocus(null /* strCSSParent */);
});

// Compute focus automatically and enforce it : Set focus on first visible enabled field
function form_control_autofocus(strCSSParent)
{
  if (strCSSParent == null)
  {
    strCSSParent = "body";
  }
  // WARNING: workaround typeahead limitation: Try to find typeahead field first (the one with class tt-input)
  var objFocus = $(strCSSParent).find(".form-control.tt-input:enabled:visible:first");
  if (objFocus && objFocus.length == 0)
  {
    // No typeahead field: try to find a standard field (one with CSS class .form-control)
    objFocus = $(strCSSParent).find(".form-control:enabled:visible:first");
  }
  objFocus.focus();
}
function form_check_required(objFormControls)
{
  if (objFormControls == null)
  {
    objFormControls = $(".form-control-required");
  }
  else
  {
    objFormControls = objFormControls.find(".form-control-required");
  }
  objFormControls.each(function(index) {
    // Validate required field: MUST NOT be empty on focus out (otherwise we set the error class)
    form_control_check_required($(this));
  });
}
function form_control_check_required(objFormControl)
{
  // Validate required field: MUST NOT be empty on focus out (otherwise we set the error class)
  var strValue = objFormControl.val().replace(/^ +/g, "").replace(/ +$/g, "");
  if (strValue == "")
  {
    objFormControl.parent().addClass("has-error").removeClass("has-success has-warning");
  }
  else
  {
    objFormControl.parent().removeClass("has-error has-warning").addClass("has-success");
  }
}
</script>
